//
//// For those who want the bleeding edge
//buildscript {
//    repositories {
//        jcenter()
//        maven {
//            name = "forge"
//            url = "http://files.minecraftforge.net/maven"
//        }
//        maven {
//            name = "sponge"
//            url = "https://repo.spongepowered.org/maven"
//        }
//    }
//    dependencies {
//        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
//        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
//    }
//}
//apply plugin: 'net.minecraftforge.gradle.forge'
//apply plugin: 'org.spongepowered.mixin'
//
///*
//// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
//plugins {
//    id "net.minecraftforge.gradle.forge" version "2.0.2"
//}
//*/
//version = "1.5"
//group= "com.llamalad7.betterchat" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = "betterchat"
//sourceCompatibility = 8
//targetCompatibility = 8
//
//minecraft {
//    version = "1.8.9-11.15.1.2318-1.8.9"
//    runDir = "run"
//
//    // the mappings can be changed at any time, and must be in the following format.
//    // snapshot_YYYYMMDD   snapshot are built nightly.
//    // stable_#            stables are built at the discretion of the MCP team.
//    // Use non-default mappings at your own risk. they may not allways work.
//    // simply re-run your setup task after changing the mappings to update your workspace.
//    mappings = "stable_22"
//    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
//}
//
//repositories {
//    maven { url 'https://repo.spongepowered.org/maven/' }
//}
//
//dependencies {
//    // you may put jars on which you depend on in ./libs
//    // or you may define them like so..
//    //compile "some.group:artifact:version:classifier"
//    //compile "some.group:artifact:version"
//
//    // real examples
//    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
//    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
//
//    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
//    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//
//    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
//    // except that these dependencies get remapped to your current MCP mappings
//    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//
//    // for more info...
//    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
//    // http://www.gradle.org/docs/current/userguide/dependency_management.html
//    provided('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
//        exclude module: 'launchwrapper'
//        exclude module: 'guava'
//        exclude module: 'gson'
//        exclude module: 'commons-io'
//        exclude module: 'log4j-core'
//    }
//}
//
//mixin {
//    defaultObfuscationEnv searge
//    add sourceSets.main, "mixins.betterchat.refmap.json"
//}
//
//jar {
//    from configurations.provided.asFileTree.files.collect {
//        zipTree(it)
//    }
//
//    manifest.attributes(
//            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
//            'MixinConfigs': "betterchat.mixins.json",
//            'FMLCorePluginContainsFMLMod': true,
//            "ForceLoadAsMod": true
//    )
//}
//
//processResources
//{
//    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
//
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }
//
//    // copy everything else, thats not the mcmod.info
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'mcmod.info'
//    }
//}
//task moveResources {
//    doLast {
//        ant.move file: "${buildDir}/resources/main",
//                todir: "${buildDir}/classes/java"
//    }
//}
//
//moveResources.dependsOn processResources
//classes.dependsOn moveResources

plugins {
    id "fabric-loom" version "1.3-SNAPSHOT"
    id "legacy-looming" version "1.3-SNAPSHOT" // Version must be the same as fabric-loom's
    id "maven-publish"
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {}

loom {
    // Only needed for versions not available from vanilla launcher by default.
    // customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

    // Required by 1.7.x
    // runs {
    // 	client {
    // 		programArgs "--userProperties", "{}"
    // 	}
    // }
    if(System.getProperty("os.name").toLowerCase().contains("mac")) {
        runConfigs.named("client").get().getVmArgs().remove("-XstartOnFirstThread")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(legacy.yarn(project.minecraft_version, project.yarn_build))
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API provides hooks for events, item registration, and more. As most mods will need this, it's included by default.
    // If you know for a fact you don't, it's not required and can be safely removed.
    modImplementation "net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}"

    implementation files("./libs/toxiclibscore.jar")
    implementation files("./libs/verletphysics.jar")

    // You can retrieve a specific api module using this notation.
    // modImplementation(legacy.apiModule("legacy-fabric-item-groups-v1", project.fabric_version))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    it.options.encoding = "UTF-8"

    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = 8
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // Select the repositories you want to publish to
    repositories {
        // Uncomment to publish to the local maven
        // mavenLocal()
    }
}
